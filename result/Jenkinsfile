pipeline {
    agent none

    stages {
        stage('Build') {

          when{
            changeset "**/result/**"
          }
        agent{
          docker {
            image 'node:8.16.0-alpine'
          }
        }

            steps {
                echo 'Compiling result app...'
                dir('result') {
                  sh 'npm install'
                }
            }
        }
        stage('Test') {
          when{
            changeset "**/result/**"
          }
        agent{
          docker {
            image 'node:8.16.0-alpine'
          }
        }

            steps {
                echo 'Running Unit Tests on result app...'
                dir('result'){
                  sh 'npm test'
                }
            }
        }
        stage('docker-package'){
          agent any
          when{
            changeset "**/result/**"
          }
          steps{
            echo 'Packaging result app with docker'
            script{
              docker.withRegistry('https://index.docker.io/v1/','dockerlogin') 
              {
                def resultImage = docker.build("rotimi98/result:v${env.BUILD_ID}", "./result")
                resultImage.push()
                resultImage.push("${env.BRANCH_NAME}")
                resultImage.push("latest")
              }
            }
          }
        }

    }
        post{
          always{
            echo 'Building multibranch pipeline for result is completed..'
          }
          failure{
            slackSend (channel: "training", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open)")
          }
          success{
            slackSend (channel: "training", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open)")
          }
        }
}
