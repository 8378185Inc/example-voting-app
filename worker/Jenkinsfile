pipeline {

    agent none
      
    stages {
        stage('Build') {
          when{
            changeset "**/worker/**"
          }
        agent {
          docker {
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }

            steps {
                echo 'Building worker app'
                dir('worker') {
                  sh 'mvn compile'
                }
            }
        }
        stage('Test') {
          when{
            changeset "**/worker/**"
          }
        agent {
          docker {
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }

            steps {
                echo 'Running Unit Tests on worker app...'
                dir('worker'){
                  sh 'mvn clean test'
                }
            }
        }
        stage("Package") {
          when{
            branch 'master'
            changeset "**/worker/**"
          }
        agent {
          docker {
            image 'maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }
            steps{
              echo 'Packaging worker app into a jarfile'
              dir('worker'){
                sh 'mvn package -DskipTests'
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
              }
            }
          }

        stage('docker-package'){
          agent any
          when{
            changeset "**/worker/**"
            branch 'master'
          }
          steps{
            echo 'Packaging worker app with docker'
            script{
              docker.withRegistry('https://index.docker.io/v1/','dockerlogin') 
              {
                def workerImage = docker.build("rotimi98/worker:v${env.BUILD_ID}", "./worker")
                workerImage.push()
                workerImage.push("${env.BRANCH_NAME}")
                workerImage.push("latest")
              }
            }
          }
        }
    }
        post{
          always{
            echo 'Building multibranch pipeline for worker is completed..'
          }

          failure{
            slackSend (channel: "training", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open)")
          }
          success{
            slackSend (channel: "training", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open)")
          }


        }
}
