pipeline {
    agent none

    stages {
        stage('Build') {
          when{
            changeset "**/vote/**"
          }

        agent{
          docker {
            image 'python:3.11.0-bullseye'
          }
        }
            steps {
                echo 'Compiling vote app...'
                dir('vote') {
                  sh 'pip install -r requirements.txt || true'
                }
            }
        }
        stage('Test') {
          when{
            changeset "**/vote/**"
          }
        agent{
          docker {
            image 'python:3.11.0-bullseye'
          }
        }
            steps {
                echo 'Running Unit Tests on vote app...'
                dir('vote'){
                  sh 'nosetests -v || true'
                }
            }
        }
        stage('docker-package'){
          agent any

          when{
            changeset "**/vote/**"
          }
          steps{
            echo 'Packaging vote app with docker'
            script{
              docker.withRegistry('https://index.docker.io/v1/','dockerlogin') 
              {
                def resultImage = docker.build("rotimi98/vote:v${env.BUILD_ID}", "./vote")
                resultImage.push()
                resultImage.push("${env.BRANCH_NAME}")
                resultImage.push("latest")
              }
            }
          }
        }

    }
        post{
          always{
            echo 'Building multibranch pipeline for vote is completed..'
          }
          failure{
            slackSend (channel: "training", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open)")
          }
          success{
            slackSend (channel: "training", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open)")
          }
        }
}
